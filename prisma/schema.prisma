// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// for production
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// development
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model Admin {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Tourist {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(100)
  email          String   @unique @db.VarChar(100)
  password       String   @db.VarChar(100)
  passportNumber String   @unique @db.VarChar(100)
  phone          String   @unique @db.VarChar(20)
  address        String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  trips          Trip[]

  @@map("tourists")
}

model Trip {
  id           Int           @id @default(autoincrement())
  touristId    String
  startDate    DateTime
  endDate      DateTime
  status       TripStatus    @default(ONGOING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  destinations Destination[]
  Tourist      Tourist       @relation(fields: [touristId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model Destination {
  id        Int      @id @default(autoincrement())
  tripId    Int
  name      String   @db.VarChar(100)
  country   String   @db.VarChar(100)
  city      String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("destinations")
}

enum TripStatus {
  ONGOING
  COMPLETED
  CENCELED
}
